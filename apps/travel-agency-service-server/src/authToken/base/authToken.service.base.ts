/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AuthToken as PrismaAuthToken } from "@prisma/client";

export class AuthTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthTokenCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authToken.count(args);
  }

  async authTokens(
    args: Prisma.AuthTokenFindManyArgs
  ): Promise<PrismaAuthToken[]> {
    return this.prisma.authToken.findMany(args);
  }
  async authToken(
    args: Prisma.AuthTokenFindUniqueArgs
  ): Promise<PrismaAuthToken | null> {
    return this.prisma.authToken.findUnique(args);
  }
  async createAuthToken(
    args: Prisma.AuthTokenCreateArgs
  ): Promise<PrismaAuthToken> {
    return this.prisma.authToken.create(args);
  }
  async updateAuthToken(
    args: Prisma.AuthTokenUpdateArgs
  ): Promise<PrismaAuthToken> {
    return this.prisma.authToken.update(args);
  }
  async deleteAuthToken(
    args: Prisma.AuthTokenDeleteArgs
  ): Promise<PrismaAuthToken> {
    return this.prisma.authToken.delete(args);
  }
}
