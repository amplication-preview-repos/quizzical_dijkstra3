/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AuthToken } from "./AuthToken";
import { AuthTokenCountArgs } from "./AuthTokenCountArgs";
import { AuthTokenFindManyArgs } from "./AuthTokenFindManyArgs";
import { AuthTokenFindUniqueArgs } from "./AuthTokenFindUniqueArgs";
import { DeleteAuthTokenArgs } from "./DeleteAuthTokenArgs";
import { AuthTokenService } from "../authToken.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AuthToken)
export class AuthTokenResolverBase {
  constructor(
    protected readonly service: AuthTokenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AuthToken",
    action: "read",
    possession: "any",
  })
  async _authTokensMeta(
    @graphql.Args() args: AuthTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AuthToken])
  @nestAccessControl.UseRoles({
    resource: "AuthToken",
    action: "read",
    possession: "any",
  })
  async authTokens(
    @graphql.Args() args: AuthTokenFindManyArgs
  ): Promise<AuthToken[]> {
    return this.service.authTokens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AuthToken, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AuthToken",
    action: "read",
    possession: "own",
  })
  async authToken(
    @graphql.Args() args: AuthTokenFindUniqueArgs
  ): Promise<AuthToken | null> {
    const result = await this.service.authToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AuthToken)
  @nestAccessControl.UseRoles({
    resource: "AuthToken",
    action: "delete",
    possession: "any",
  })
  async deleteAuthToken(
    @graphql.Args() args: DeleteAuthTokenArgs
  ): Promise<AuthToken | null> {
    try {
      return await this.service.deleteAuthToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
